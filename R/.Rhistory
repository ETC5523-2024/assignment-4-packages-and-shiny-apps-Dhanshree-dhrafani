library(roxygen2)
roxygen2::roxygenize("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani")
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)
runShinyApp()
install.packages("shiny")
library(shiny)
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)
runShinyApp()
#' Launch the Shiny app
#'
#' Launches the Shiny app for exploring classic literature data, loading the dataset from the specified data-raw folder.
#' @export
runShinyApp <- function() {
# Load the required packages
if (!require(shiny)) install.packages("shiny"); library(shiny)
if (!require(ggplot2)) install.packages("ggplot2"); library(ggplot2)
if (!require(dplyr)) install.packages("dplyr"); library(dplyr)
# Load the dataset from the local 'data-raw' folder
data_path <- "E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani/data-raw/classics.csv"
# Check if the data file exists
if (!file.exists(data_path)) {
stop("Data file not found. Make sure 'classics.csv' is in the 'data-raw' folder.", call. = FALSE)
}
# Read the dataset
your_data <- read.csv(data_path)
# Print the range of readability scores for debugging
print(range(your_data$metrics.difficulty.flesch.reading.ease, na.rm = TRUE))
# Define the UI
ui <- fluidPage(
titlePanel("Explore Classic Literature Data"),
sidebarLayout(
sidebarPanel(
selectInput("selectedBook", "Choose a Book:", choices = unique(your_data$bibliography.title)),
sliderInput("readabilityRange",
"Filter by Readability Score:",
min = min(your_data$metrics.difficulty.flesch.reading.ease, na.rm = TRUE),
max = max(your_data$metrics.difficulty.flesch.reading.ease, na.rm = TRUE),
value = c(min(your_data$metrics.difficulty.flesch.reading.ease, na.rm = TRUE),
max(your_data$metrics.difficulty.flesch.reading.ease, na.rm = TRUE)))
),
mainPanel(
plotOutput("popularityPlot"),
textOutput("interpretation")
)
)
)
# Define the server logic
server <- function(input, output) {
# Reactive expression to filter data based on user input
filteredData <- reactive({
filtered <- your_data %>%
filter(!is.na(metrics.difficulty.flesch.reading.ease),
!is.na(metadata.downloads),
bibliography.title == input$selectedBook,
metrics.difficulty.flesch.reading.ease >= input$readabilityRange[1],
metrics.difficulty.flesch.reading.ease <= input$readabilityRange[2])
print(filtered)  # Debugging: See the filtered data
return(filtered)
})
# Generate plot based on filtered data
output$popularityPlot <- renderPlot({
if (nrow(filteredData()) == 0) {
return(NULL)  # If no data to plot, show nothing
}
ggplot(filteredData(), aes(x = metrics.difficulty.flesch.reading.ease, y = metadata.downloads)) +
geom_point() +
labs(
title = paste("Readability vs Downloads for", input$selectedBook),
x = "Flesch Reading Ease Score",
y = "Number of Downloads"
) +
theme_minimal()
})
# Interpretation text
output$interpretation <- renderText({
paste("This plot shows the relationship between readability and downloads for", input$selectedBook,
". Books with higher readability scores tend to be downloaded more frequently.")
})
}
# Run the application
shinyApp(ui = ui, server = server)
}
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)
runShinyApp()
library(assignment4package)
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)
runShinyApp()
