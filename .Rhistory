table(experiment_data$replicate)
summary(experiment_data$time)
#| echo: false
# Set up chunk for all slides
knitr::opts_chunk$set(
fig.width = 6,
fig.height = 4,
fig.align = "center",
out.width = "100%",
code.line.numbers = FALSE,
fig.retina = 4,
echo = TRUE,
message = FALSE,
warning = FALSE,
cache = FALSE,
dev.args = list(pointsize = 11)
)
#| echo: false
# Load libraries
library(tidyverse)
library(readxl)
library(visdat)
library(naniar)
library(imputeTS)
library(rvest)
library(conflicted)
conflicts_prefer(dplyr::filter)
conflicts_prefer(dplyr::select)
conflicts_prefer(dplyr::slice)
# Plot options and themes
options(
digits = 2,
width = 60,
ggplot2.continuous.colour = "viridis",
ggplot2.continuous.fill = "viridis",
ggplot2.discrete.colour = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442"),
ggplot2.discrete.fill = c("#D55E00", "#0072B2", "#009E73", "#CC79A7", "#E69F00", "#56B4E9", "#F0E442")
)
theme_set(theme_bw(base_size = 14) +
theme(
aspect.ratio = 1,
plot.background = element_rect(fill = 'transparent', colour = NA),
plot.title.position = "plot",
plot.title = element_text(size = 24),
panel.background = element_rect(fill = 'transparent', colour = NA),
legend.background = element_rect(fill = 'transparent', colour = NA),
legend.key = element_rect(fill = 'transparent', colour = NA)
)
)
#| echo: true
#| code-fold: true
library(rvest)
library(dplyr)
# URL of the Wikipedia page
url <- "https://en.wikipedia.org/wiki/2024_Summer_Olympics_medal_table"
# Read the HTML content
page <- read_html(url)
# Extract the medal table
medal_table <- page %>%
html_node(".wikitable") %>%
html_table()
# Clean and format the data
medal_table <- medal_table %>%
select(Rank, Country = NOC, Gold, Silver, Bronze, Total) %>%
mutate(across(c(Rank, Gold, Silver, Bronze, Total), as.numeric)) %>%
filter(!is.na(Rank))
# Display top 10 countries by gold medal count
top_10_gold <- medal_table %>%
arrange(desc(Gold)) %>%
head(10)
print(top_10_gold)
#| echo: true
#| code-fold: true
library(rvest)
library(dplyr)
# Scrape medal data
medal_url <- "https://en.wikipedia.org/wiki/2024_Summer_Olympics_medal_table"
medal_table <- read_html(medal_url) %>%
html_node(".wikitable") %>%
html_table() %>%
select(Country = NOC, Gold, Silver, Bronze, Total) %>%
mutate(across(c(Gold, Silver, Bronze, Total), as.numeric))
# Scrape population data
pop_url <- "https://worldpopulationreview.com/countries"
population_data <- read_html(pop_url) %>%
html_node("table") %>%
html_table() %>%
select(Country, Population = `2024 Population`) %>%
mutate(Population = as.numeric(gsub(",", "", Population)))
# Combine data and calculate per capita medals
combined_data <- medal_table %>%
left_join(population_data, by = "Country") %>%
mutate(Medals_per_million = Total / (Population / 1e6)) %>%
filter(!is.na(Population))
# Display top 10 countries by medals per capita
top_10_per_capita <- combined_data %>%
arrange(desc(Medals_per_million)) %>%
select(Country, Total, Population, Medals_per_million) %>%
head(10)
print(top_10_per_capita)
#| echo: true
#| code-fold: true
library(rvest)
library(dplyr)
# Scrape 2020 Tokyo Olympics data
tokyo_url <- "https://en.wikipedia.org/wiki/2020_Summer_Olympics_medal_table"
tokyo_data <- read_html(tokyo_url) %>%
html_table() %>%
.[[4]] %>%  # Select the fourth table
select(Country = NOC, Gold, Silver, Bronze, Total_2020 = Total) %>%
filter(Country != "Totals (93 entries)")  # Remove the total row
# Convert medal counts to numeric
tokyo_data <- tokyo_data %>%
mutate(across(c(Gold, Silver, Bronze, Total_2020), as.numeric))
# Combine with current data
combined_data <- combined_data %>%
left_join(tokyo_data, by = "Country") %>%
mutate(
Total_2020 = coalesce(Total_2020, 0),  # Replace NA with 0 for countries that didn't win medals in 2020
Improvement = (Total - Total_2020) / (Total_2020 + 1) * 100,  # Add 1 to avoid division by zero
Improvement_Score = Improvement * log(Total + 1)
) %>%
arrange(desc(Improvement_Score))
# Display results
print(head(combined_data[c("Country", "Total", "Total_2020", "Improvement", "Improvement_Score")], 10))
#| echo: true
#| code-fold: true
combined_data %>%
mutate(MQI = (3 * Gold.x + 2 * Silver.x + Bronze.x) / Total) %>%
arrange(desc(MQI))
#| echo: true
#| code-fold: true
combined_data %>%
mutate(PAPS = (Total / Population) * 1e6 * log(Total + 1)) %>%
arrange(desc(PAPS))
#| echo: true
#| code-fold: true
# Load necessary libraries
library(tidyverse)
library(naniar)
library(skimr)
# Step 1: Load the data
data <- read.csv("Q2 data/Data.csv")
#| echo: true
#| code-fold: true
# Step 2: Filter for the last 20 years (2004-2022) and select variables with "fuel" in the explanation
fuel_data <- data %>%
filter(grepl("fuel", Series.Name, ignore.case = TRUE)) %>%
select(Country.Name, Country.Code, Series.Name, Series.Code, matches("^X\\d{4}"))
#| echo: true
#| code-fold: true
# Step 3: Reshape the data to long format
fuel_data_long <- fuel_data %>%
pivot_longer(cols = starts_with("X"),
names_to = "Year",
values_to = "Value") %>%
mutate(Year = as.numeric(substr(Year, 2, 5))) %>%
filter(Year >= 2004 & Year <= 2022)
#| echo: true
#| code-fold: true
# Step 4: Calculate the percentage of missing values for each country
missing_by_country <- fuel_data_long %>%
group_by(Country.Name) %>%
summarise(percent_missing = mean(is.na(Value) | Value == "..") * 100)
#| echo: true
#| code-fold: true
# Step 5: Filter countries with less than 50% missing data
valid_countries <- missing_by_country %>%
filter(percent_missing < 50) %>%
pull(Country.Name)
fuel_data_filtered <- fuel_data_long %>%
filter(Country.Name %in% valid_countries)
#| echo: true
#| code-fold: true
# Step 6: Remove variables with more than 50% missing values
valid_variables <- fuel_data_filtered %>%
group_by(Series.Name) %>%
summarise(percent_present = mean(!is.na(Value) & Value != "..") * 100) %>%
filter(percent_present > 50) %>%
pull(Series.Name)
fuel_data_valid <- fuel_data_filtered %>%
filter(Series.Name %in% valid_variables)
#| echo: true
#| code-fold: true
# Step 7: Convert Value to numeric and impute missing values with mean by country and series
fuel_data_imputed <- fuel_data_valid %>%
mutate(Value = as.numeric(ifelse(Value == "..", NA, Value))) %>%
group_by(Country.Name, Series.Name) %>%
mutate(Value = ifelse(is.na(Value), mean(Value, na.rm = TRUE), Value)) %>%
ungroup()
#| echo: true
#| code-fold: true
# Step 8: Summary statistics
summary_stats <- skim(fuel_data_imputed)
#| echo: true
#| code-fold: true
# Step 9: Create plots
# Example: Boxplot of Access to clean fuels and technologies for cooking
ggplot(fuel_data_imputed %>% filter(Series.Name == "Access to clean fuels and technologies for cooking (% of population)"),
aes(x = as.factor(Year), y = Value, fill = as.factor(Year))) +
geom_boxplot() +
theme_minimal() +
labs(title = "Distribution of Access to Clean Fuels for Cooking by Year",
x = "Year",
y = "Access to Clean Fuels (%)") +
scale_fill_viridis_d() +
theme(legend.position = "none") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
#| echo: true
#| code-fold: true
# Example: Scatter plot of Fuel imports vs exports
fuel_imports <- fuel_data_imputed %>%
filter(Series.Name == "Fuel imports (% of merchandise imports)") %>%
select(Country.Name, Year, Value) %>%
rename(Imports = Value)
fuel_exports <- fuel_data_imputed %>%
filter(Series.Name == "Fuel exports (% of merchandise exports)") %>%
select(Country.Name, Year, Value) %>%
rename(Exports = Value)
fuel_imports_exports <- inner_join(fuel_imports, fuel_exports, by = c("Country.Name", "Year"))
ggplot(fuel_imports_exports, aes(x = Imports, y = Exports)) +
geom_point(aes(color = "Exports"), alpha = 0.5) +
geom_point(aes(y = Imports, color = "Imports"), alpha = 0.5) +
theme_minimal() +
labs(title = "Fuel Imports vs Exports",
x = "Fuel Imports (% of merchandise imports)",
y = "Fuel Exports (% of merchandise exports)") +
scale_color_manual(values = c("Exports" = "blue", "Imports" = "red")) +
guides(color = guide_legend(title = "Type"))
#| echo: true
#| code-fold: true
# Prepare data for time series plot
time_series_data <- fuel_data_imputed %>%
filter(Series.Name == "Access to clean fuels and technologies for cooking (% of population)") %>%
group_by(Year) %>%
summarise(Mean_Access = mean(Value, na.rm = TRUE),
Min_Access = min(Value, na.rm = TRUE),
Max_Access = max(Value, na.rm = TRUE))
# Create time series plot
ggplot(time_series_data, aes(x = Year)) +
geom_line(aes(y = Mean_Access), color = "blue") +
geom_ribbon(aes(ymin = Min_Access, ymax = Max_Access), alpha = 0.2) +
theme_minimal() +
labs(title = "Global Access to Clean Fuels for Cooking Over Time",
x = "Year",
y = "Access to Clean Fuels (%)") +
ylim(0, 100)
#| echo: true
#| code-fold: true
# Save the processed data
write.csv(fuel_data_imputed, "fuel_data_processed.csv", row.names = FALSE)
#| echo: true
#| code-fold: true
experiment_data <- read_csv("https://raw.githubusercontent.com/srkobakian/experiment/master/data/DAT_HexmapPilotData_V1_20191115.csv")
#| echo: true
#| code-fold: true
str(experiment_data)
#| echo: true
#| code-fold: true
factors <- c("type", "trend", "group")
print(paste("Experimental factors:", paste(factors, collapse = ", ")))
#| echo: true
#| code-fold: true
lapply(experiment_data[factors], unique)
#| echo: true
#| code-fold: true
library(kableExtra)
treatment_counts <- experiment_data %>%
group_by(type, trend, group) %>%
summarise(count = n(), .groups = 'drop')
kable(treatment_counts)
#| echo: true
#| code-fold: true
ggplot(treatment_counts, aes(x = type, y = count, fill = trend)) +
geom_col(position = "dodge") +
facet_wrap(~group) +
labs(title = "Number of Measurements per Treatment Combination",
x = "Map Type", y = "Count")
#| echo: true
#| code-fold: true
mean_detection <- mean(experiment_data$detect)
print(paste("Overall detection rate:", round(mean_detection * 100, 2), "%"))
#| echo: true
#| code-fold: true
experiment_data %>%
group_by(type, trend) %>%
summarise(detection_rate = mean(detect), .groups = 'drop') %>%
kable()
#| echo: true
#| code-fold: true
library(ggplot2)
detection_rates <- experiment_data %>%
group_by(type, trend) %>%
summarise(detection_rate = mean(detect), .groups = 'drop')
ggplot(detection_rates, aes(x = type, y = trend, fill = detection_rate)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Detection Rates by Map Type and Trend Pattern",
x = "Map Type", y = "Trend Pattern", fill = "Detection Rate") +
theme_minimal()
#| echo: true
#| code-fold: true
table(experiment_data$order)
#| echo: true
#| code-fold: true
table(experiment_data$replicate)
#| echo: true
#| code-fold: true
summary(experiment_data$time)
library(rvest)
library(dplyr)
# Scrape GDP data from World Bank
gdp_url <- "https://data.worldbank.org/indicator/NY.GDP.MKTP.CD"
gdp_data <- read_html(gdp_url) %>%
html_table() %>%
.[[1]] %>%
select(Country = `Country Name`, GDP = `2022 [YR2022]`) %>%
mutate(GDP = as.numeric(GDP))
library(rvest)
library(dplyr)
library(readxl)
# Download IMF World Economic Outlook data
imf_url <- "https://www.imf.org/-/media/Files/Publications/WEO/WEO-Database/2023/WEOOct2023all.ashx"
temp_file <- tempfile(fileext = ".xlsx")
download.file(imf_url, temp_file, mode = "wb")
# Read GDP data
gdp_data <- read_excel(temp_file, sheet = "GDP, current prices (U.S. dollars)") %>%
select(Country = `Country`, GDP = `2023`) %>%
mutate(GDP = as.numeric(GDP))
# Assume we have event participation data in a dataset called event_data
event_data <- data.frame(Country = combined_data$Country, Events_Participated = runif(nrow(combined_data), 10, 50))
combined_data <- combined_data %>%
left_join(event_data, by = "Country") %>%
mutate(MPEP = (3 * Gold + 2 * Silver + Bronze) / Events_Participated) %>%
arrange(desc(MPEP))
View(event_data)
View(combined_data)
View(event_data)
View(combined_data)
# Assume we have event participation data in a dataset called event_data
event_data <- data.frame(Country = combined_data$Country, Events_Participated = runif(nrow(combined_data), 10, 50))
combined_data <- combined_data %>%
left_join(event_data, by = "Country") %>%
mutate(MPEP = (3 * Gold.x + 2 * Silver.x + Bronze.x) / Events_Participated) %>%
arrange(desc(MPEP))
# Display the top 10 countries by MPEP
print(head(combined_data[c("Country", "MPEP")], 10))
# Simulate data for 15 countries
set.seed(123)  # For reproducibility
countries <- c("USA", "China", "Japan", "Australia", "France", "Germany",
"Italy", "South Korea", "Netherlands", "Canada", "Hungary",
"Brazil", "India", "Russia", "UK")
gold <- sample(5:50, 15, replace = TRUE)
silver <- sample(5:50, 15, replace = TRUE)
bronze <- sample(5:50, 15, replace = TRUE)
population <- sample(seq(1e7, 1.5e9, length.out = 15), 15)
events_participated <- sample(10:50, 15, replace = TRUE)
# Combine into a data frame
new_dataset <- data.frame(Country = countries,
Gold = gold,
Silver = silver,
Bronze = bronze,
Total = gold + silver + bronze,
Population = population,
Events_Participated = events_participated)
print(new_dataset)
new_dataset <- new_dataset %>%
mutate(MPEE = Total / Events_Participated) %>%
arrange(desc(MPEE))
# Display the top countries by MPEE
print(head(new_dataset[c("Country", "MPEE")], 10))
reference("rvest")
refrence(rvest)
reference(rvest)
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
library(assignment4package)  # Replace with your actual package name
library(assignment4package)  # Replace with your actual package name
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
# Load the CSV file
classics <- read.csv("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani/data-raw/classics.csv")
# Save it as an RDA file in the correct format in your 'data' directory
save(classics, file = "E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani/data/classics.rda", version = 2)
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
runShinyApp()
runShinyApp()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
library(assignment4package)  # Replace with your actual package name
runShinyApp()
getwd()  # This should return the root folder of your package
setwd("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani")
getwd()  # This should return the root folder of your package
usethis::proj_get()
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
vignette("exploring_the_classics_data", package = "assignment4package")
install.packages("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani", repos = NULL, type = "source")
restart
pkgdown::build_site()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
devtools::load_all(".")
runShinyApp()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
devtools::load_all(".")
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
gitcreds::gitcreds_get()
usethis::use_pkgdown()
usethis::use_pkgdown_github_pages()
rlang::last_trace()
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
gitcreds::gitcreds_delete()
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
gitcreds::gitcreds_set()
gitcreds::gitcreds_get()
gh::gh("GET /user")
usethis::use_pkgdown_github_pages()
usethis::use_github()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_github()
usethis::use_github()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
system("git remote -v")
system("git remote set-url origin https://github.com/ETC5523-2024/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani.git")
usethis::create_github_token()
gitcreds::gitcreds_set()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::clean_site()
pkgdown::build_site()
_pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::clean_site()
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown_github_pages()
if (!require("pkgdown")) {
install.packages("pkgdown")
library(pkgdown)
}
if (!require("pkgdown")) {
install.packages("pkgdown")
library(pkgdown)
}
pkgdown::build_site()
getwd()
setwd("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani/docs")
getwd()
if (!require("pkgdown")) {
install.packages("pkgdown")
library(pkgdown)
}
pkgdown::build_site()
setwd("E:/MONASH/Communication with Data/assignment-4-packages-and-shiny-apps-Dhanshree-dhrafani")
pkgdown::build_site()
usethis::use_pkgdown_github_pages()
